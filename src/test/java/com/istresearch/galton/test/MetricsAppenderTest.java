package com.istresearch.galton.test;/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import net.logstash.logback.marker.Markers;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ThreadLocalRandom;

/**
 * TODO: come up w/ unit tests
 */
public class MetricsAppenderTest {

    private static final Logger logger = LoggerFactory.getLogger(MetricsAppenderTest.class);

    @Test public void testMetricsAppender() {
        int i = 0;
        while (i < 20) {
            Map<String, String> markers = new HashMap<String, String>() {{
                put("galton.counter", "count_this");
                put("rule_type", "aType");
                put("galton.gauge.rules_pending", String.valueOf(ThreadLocalRandom.current().nextInt(0, 1000)));
            }};
            logger.info(Markers.appendEntries(markers), "rule activation pending");
            logger.info("this is a meaningless log statement");
            logger.info("rule deactivation pending");
            Map<String, String> markers2 = new HashMap<String, String>() {{
                put("nothing_to_see_here", "anId");
            }};
            logger.info(Markers.appendEntries(markers2), "irrelevant logs");
            logger.info("another meaningless one");
            Map<String, String> markers3 = new HashMap<String, String>() {{
                put("an_important_gauge", String.valueOf(ThreadLocalRandom.current().nextInt(0, 1000)));
                put("metric_ton_of_nothing", "aType");
            }};
            logger.info(Markers.appendEntries(markers3), "an important stmt");
            try {
                Thread.sleep(5000);
            } catch (Exception e) {
                System.out.println("exception " + e.getMessage());
            }
            i++;
        }
//        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }
}
